import { Injectable } from '@nestjs/common';
import { MyContext } from './types/my-context';
import { UserService } from '../user/user.service';
import { ERRORS } from '../common/constants/errors';
import { formatUserProfile } from '../common/utils/formatters';
import { CALLBACKS } from '../common/constants/callbacks';

@Injectable()
export class BotService {
  constructor(private readonly userService: UserService) {}

  async handleProfile(ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    const user = await this.userService.findByTelegramId(telegramId);
    if (!user) {
      await ctx.reply(ERRORS.USER_NOT_FOUND);
      return;
    }

    await ctx.reply(formatUserProfile(user), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üì∞ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã',
              callback_data: CALLBACKS.PROFILE_FEED,
            },
          ],
          [
            {
              text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫',
              callback_data: CALLBACKS.PROFILE_EDIT_NICKNAME,
            },
            {
              text: 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ',
              callback_data: CALLBACKS.PROFILE_EDIT_AVATAR,
            },
          ],
          [
            {
              text: 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å ¬´–û —Å–µ–±–µ¬ª',
              callback_data: CALLBACKS.PROFILE_EDIT_ABOUT,
            },
          ],
          [
            {
              text: 'üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ',
              callback_data: CALLBACKS.PROFILE_REFILL,
            },
          ],
        ],
      },
    });
    return;
  }
}
