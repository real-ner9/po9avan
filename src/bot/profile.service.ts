import { Injectable } from '@nestjs/common';
import { MyContext } from './types/my-context';
import { UserService } from '../user/user.service';
import { ERRORS } from '../common/constants/errors';
import { formatUserProfile } from '../common/utils/formatters';
import { CALLBACKS } from '../common/constants/callbacks';
import { REG_STEPS } from '../common/constants/steps';
import { sanitizePlainText } from '../common/utils/sanitize';
import { ProfessionService } from '../catalogs/profession/profession.service';
import { REPLIES } from '../common/constants/replies';

@Injectable()
export class ProfileService {
  constructor(
    private readonly userService: UserService,
    private readonly professionService: ProfessionService,
  ) {}
  private professionRegExp = /^prof:(?<id>[a-fA-F0-9]{24})\b/;

  async handleProfile(ctx: MyContext) {
    const telegramId = ctx.from?.id?.toString();
    const user = await this.userService.findByTelegramId(telegramId);
    if (!user) {
      await ctx.reply(ERRORS.USER_NOT_FOUND);
      return;
    }

    await ctx.reply(formatUserProfile(user), {
      reply_markup: {
        inline_keyboard: [
          // [
          //   {
          //     text: 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ',
          //     callback_data: CALLBACKS.PROFILE_EDIT_AVATAR,
          //   },
          // ],
          [
            {
              text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫',
              callback_data: CALLBACKS.PROFILE_EDIT_NICKNAME,
            },
          ],
          [
            {
              text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
              callback_data: CALLBACKS.PROFILE_EDIT_PROFESSION,
            },
          ],
          [
            {
              text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
              callback_data: CALLBACKS.PROFILE_EDIT_TARGET_PROFESSION,
            },
          ],
          [
            {
              text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–æ–ª)',
              callback_data: CALLBACKS.PROFILE_EDIT_EXPERIENCE,
            },
          ],
          [
            {
              text: 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å ¬´–û —Å–µ–±–µ¬ª',
              callback_data: CALLBACKS.PROFILE_EDIT_ABOUT,
            },
          ],
          // [
          //   {
          //     text: 'üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ',
          //     callback_data: CALLBACKS.PROFILE_REFILL,
          //   },
          // ],
        ],
      },
    });
    return;
  }

  async startEditNickname(ctx: MyContext) {
    ctx.session.step = REG_STEPS.EDIT_NICKNAME;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫ (–¥–æ 24 —Å–∏–º–≤–æ–ª–æ–≤):');
  }

  async startEditAbout(ctx: MyContext) {
    ctx.session.step = REG_STEPS.EDIT_ABOUT;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ¬´–û —Å–µ–±–µ¬ª (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤):');
  }

  async startEditProfession(ctx: MyContext) {
    ctx.session.step = REG_STEPS.EDIT_PROFESSION;
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ inline-–ø–æ–∏—Å–∫:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîé –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞',
              switch_inline_query_current_chat: '',
            },
          ],
        ],
      },
    });
  }

  async startEditTargetProfession(ctx: MyContext) {
    ctx.session.step = REG_STEPS.EDIT_TARGET_PROFESSION;
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ inline-–ø–æ–∏—Å–∫:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîé –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞',
              switch_inline_query_current_chat: '',
            },
          ],
        ],
      },
    });
  }

  async startEditExperience(ctx: MyContext) {
    ctx.session.step = REG_STEPS.EDIT_EXPERIENCE;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞–∂ (1‚Äì13):');
  }

  async startEditAvatar(ctx: MyContext) {
    // –ó–∞–≥–ª—É—à–∫–∞: –Ω–µ –≤—Ö–æ–¥–∏–º –≤ —à–∞–≥, —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
    await ctx.reply('–ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
    await this.handleProfile(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤
  async handleEditNickname(ctx: MyContext, text: string) {
    const nickname = sanitizePlainText(text.trim(), 24);
    const telegramId = ctx.from?.id?.toString();
    await this.userService.updateByTelegramId(telegramId, { nickname });
    await ctx.reply('‚úÖ –ù–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.');
    ctx.session.step = undefined;
    await this.handleProfile(ctx);
  }

  async handleEditAbout(ctx: MyContext, text: string) {
    const about = sanitizePlainText(text, 400);
    if (about.length > 400) {
      await ctx.reply(ERRORS.ABOUT_TOO_LONG);
      return;
    }
    const telegramId = ctx.from?.id?.toString();
    await this.userService.updateByTelegramId(telegramId, { about });
    await ctx.reply('‚úÖ –¢–µ–∫—Å—Ç ¬´–û —Å–µ–±–µ¬ª –æ–±–Ω–æ–≤–ª—ë–Ω.');
    ctx.session.step = undefined;
    await this.handleProfile(ctx);
  }

  async handleEditProfession(ctx: MyContext, text: string) {
    const match = text.match(this.professionRegExp);
    if (!match?.groups?.id) {
      await ctx.reply(REPLIES.NOTIFICATION.FOLLOW_INSTRUCTIONS);
      return;
    }
    const profession = await this.professionService.findById(match.groups.id);
    if (!profession) {
      await ctx.reply(ERRORS.PROFESSION_NOT_FOUND);
      return;
    }
    const telegramId = ctx.from?.id?.toString();
    const userModel = this.userService.getUserModel();
    await userModel
      .updateOne({ telegramId }, { $set: { profession } })
      .exec();
    await ctx.reply('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
    ctx.session.step = undefined;
    await this.handleProfile(ctx);
  }

  async handleEditTargetProfession(ctx: MyContext, text: string) {
    const match = text.match(this.professionRegExp);
    if (!match?.groups?.id) {
      await ctx.reply(REPLIES.NOTIFICATION.FOLLOW_INSTRUCTIONS);
      return;
    }
    const targetProfession = await this.professionService.findById(
      match.groups.id,
    );
    if (!targetProfession) {
      await ctx.reply(ERRORS.PROFESSION_NOT_FOUND);
      return;
    }
    const telegramId = ctx.from?.id?.toString();
    const userModel = this.userService.getUserModel();
    await userModel
      .updateOne({ telegramId }, { $set: { targetProfession } })
      .exec();
    await ctx.reply('‚úÖ –¶–µ–ª–µ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
    ctx.session.step = undefined;
    await this.handleProfile(ctx);
  }

  async handleEditExperience(ctx: MyContext, text: string) {
    const value = Number(text.trim());
    if (!Number.isFinite(value) || value < 1 || value > 13) {
      await ctx.reply(ERRORS.EXPERIENCE_INVALID);
      return;
    }
    const telegramId = ctx.from?.id?.toString();
    const userModel = this.userService.getUserModel();
    await userModel
      .updateOne({ telegramId }, { $set: { experienceYears: value } })
      .exec();
    await ctx.reply('‚úÖ –°—Ç–∞–∂ –æ–±–Ω–æ–≤–ª—ë–Ω.');
    ctx.session.step = undefined;
    await this.handleProfile(ctx);
  }
}
